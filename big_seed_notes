GEN DISPLAY:
	change text display so as to use PRE-RENDERED stuff and not re-render same junk all the time
	(like commands, not a command saying, etc.)
	possible addition of renders?? --> speeds up simulation solidly...
	only render day after a response that changes day? ---> return from response if day changes, then render, otherwise just disp day_surf
	possibly move day check that renders final message out of response? kinda makes sense now
	^ also content to be pre-rendered
	check if plant needs to be drawn as much as is? and why draw function for imgs again...
	does plant itslef ever get updated? (would get captured in full screen update i suppose)


STORE:
	Add animation on storeowner question

PRUNE:
	possible fruits on plant? match number?
	FRUITS ARE ALL ON THE GROUND -> that way need not place on plant itself


EVOLVE:
	poke-esque flashing switch for transformation?
	or rather, smooth transition like plant growing? --> probably not, too hard


PLANT DISPLAY:
	Need mask for plants, so if click on plants, can gather fruit? possible scissor animation via mouse.. or no
	fruit p0ints should ends of branches ... this could be ends of trunks too though
	add stats below plant
	Modify so picking which image is based on linking stage to loaded images for given plant
	--> means taking all images from auto_draw, then throwing in class definition?
	POSSIBLE: generate different versions with different amounts of fruits.. display accordingly
	NOTE: possible to pre-render text for certain messages, store, and then throw out when neeed for smoother gameplay


PLANT CROSS:
	Track something like "health" stat secretly, and only mention when crossing plants
	Healthier plant (I.e. treated better?) has greater chance of passing along attributes
	--> so its "fitter" in this arena, and prob to choose that plant's dataset portion is higher in cross
	WILL need to save plant data somewhere on generation (pass back to main) so cross possible
	POSSIBLE: literally interlace slices of each tree? would have to avoid branches though ....
			  mix of interlacing and ... or use same algo for branch and trunk creation AND now add in leaves?
			  draw some

EVENTS:
	storm, have to treat accordingly?
	minigame during?


PLANT GEN:
	ask about what you like in a plant???? (for first one!!!)
	for trunk splitting, if split bias angle towards left or right for each split (along that split)
	continuance chance is higher lower on the tree (so less trunks so far generated)
	CRAZY POSSIBLE: take input in beginning on first plant, given input, modify numbers so that "type" or plant is produced...
					would need hard limits on width and height... has to fit in already set up plant box

	ways to vary default: lower branching, stop branching on one half (set one to used!), randomly set noeds to used for less dense branches
						  add continuance thing for strighter trees, lower possible branching, change function for higher thinning
						  change distribution from uniform length vary to extreme / based on index, add color gradient with height
						  cut splitting and allow only side branches?
						  trunks should be allowed to be thicker on occasion -- thickness tied to trunk num?

	POSIBLE: lower trunk num in general, let branches do fine stuff



NEED TO DO: move plant box down, move stats down too
			possible change rain and rays to be in  iten list, chekc  on each frame is "alive" -> if not, dont include in items draw list, update will destroy?
			draw plant second, but fit into  box (so oincrease box size slightly in  both directions)
			raise cloud and sun to cut off half, change animation to lines andthese stop on box  outlining plant


use tkinter to draw things on a canvas, randomize drawings in way that makes rando plant, then come up with rules to cross two drawings ..
WILD: depends on color values that will define plant parts? ... 
draw a bunch of test plants, try to determine way to combine the drawings so as to still have a "plant" like thing that emerges
might depend on rules that define each .. actually definitely will


same seed each time, but different base, trunk, top, and branches
make smaller seed to display
howto pick places to place leaves? --> could only be at end of branches....
attributes: 
		branch: {length, location, number, color}  --> length is like num of recursive branch offs
		base: {width, height, color} --> width for circle base means radius
		trunk: {width, height, color} --> width for trunk is equal to or less than trunk
		top: {shape, color, width} --> width is equal to or less than trunk width

# bases: start with rectangle, circle, trapezoid...
# need seed -> bud -> sapling -> super sapling -> tree
# tree is full, super sapling is base+ half trunk
# sapling is base?
# seed and bud are same, just color random that matches full plant?
# actually seed is same always brown


experiment with drawing trunks of only the same length until past certain trunk num (i.e. height?)
trunk splits? just like branch splits, but allow for literally one or two...
initially pick subset of all possible settings according to say a type of tree? -> coniferous trees have smaler angles between successive trunks?
want probably smoother sections ... longer trunks and lesser pieces? or tons, small angle changes?

look into bezier.. generate trunks similarly save for now all yoou need is points? than draw bezier point by point by calculating paramteric rep. based on all points

split trunks, fill rectangle / thick line splits?, add repeat chance on trunk



ImageDraw.arc(xy, start, end, fill=None, width=0)
ImageDraw.chord(xy, start, end, fill=None, outline=None, width=1)
ImageDraw.ellipse(xy, fill=None, outline=None, width=1)
ImageDraw.pieslice(xy, start, end, fill=None, outline=None, width=1)
ImageDraw.point(xy, fill=None)
ImageDraw.rectangle(xy, fill=None, outline=N
one, width=1)
ImageDraw.text(xy, text, fill=None, font=None, anchor=None, spacing=4, align='left', direction=None, features=None, language=None, stroke_width=0, stroke_fill=None)
ImageDraw.line(xy, fill=None, width=0, joint=None) --> width is line width, joint can be "curve" for rounded line sequences
ImageDraw.polygon(xy, fill=None, outline=None)




